import numpy as np
import pandas as pd
import statsmodels.api as sm
import matplotlib.pyplot as plt
import statsmodels.formula.api as smf

file_path_ind = "/Users/bethanytcheung/glmmwork/glmm/rosmap data - ind"
file_path_out = "/Users/bethanytcheung/glmmwork/glmm/@combined_output.txt"
# Independent variable data
data_ind = pd.read_csv(file_path_ind, sep='\t', dtype=str, low_memory=False)
print(data_ind.columns.tolist())

# Extract independent variables
dprime = data_ind['dprime'] 
d = data_ind['d']
r = data_ind['r']
rsq = data_ind['rsq']
pos1 = data_ind['pos1']

data_out = pd.read_csv(file_path_out, sep='\t', dtype=str, low_memory=False)
print(data_out.columns.tolist())
# Extract the next 5 columns (assumed to be dependent variables)
# Columns 0-4

active = data_out['r4_wgs_FAVOR_annotation_chr22_active'] # Align index if needed

# Repeat or align the group column to match rows
# Assuming len(independent_data) == len(dependent_data)
data_out['pos1'] = data_ind['pos1']
chunk_size = 10_000  # Adjust based on your memory capacity
combined_data = []

for chunk_ind in pd.read_csv(file_path_ind, sep='\t', dtype=str, chunksize=chunk_size):
    chunk_out = pd.read_csv(file_path_out, sep='\t', dtype=str, nrows=chunk_size)
    
    # Merge and process the chunk
    chunk_out['pos1'] = chunk_ind['pos1']
    chunk = pd.merge(chunk_ind, chunk_out, on='pos1')
    chunk = chunk.dropna(subset=['r4_wgs_FAVOR_annotation_chr22_active', 'd', 'dprime', 'r', 'rsq', 'pos1'])
    
    # Convert necessary columns to numeric
    for col in ['r4_wgs_FAVOR_annotation_chr22_active', 'd', 'dprime', 'r', 'rsq']:
        chunk[col] = pd.to_numeric(chunk[col], downcast='float', errors='coerce')
    chunk = chunk.dropna()
    
    combined_data.append(chunk)

# Concatenate all processed chunks
combined_data = pd.concat(combined_data, ignore_index=True)
print(f"Final combined data shape: {combined_data.shape}")

model = smf.mixedlm("r4_wgs_FAVOR_annotation_chr22_active ~ d + dprime + r + rsq", combined_data, groups=combined_data["pos1"])
result = model.fit()

print(result.summary())


import matplotlib.pyplot as plt
import seaborn as sns
from statsmodels.genmod.generalized_linear_model import GLM
from statsmodels.genmod.families import Binomial

# Example data
np.random.seed(42)
n = 100
X = pd.DataFrame({
    'intercept': 1,
    'x1': np.random.normal(size=n),
    'x2': np.random.normal(size=n),
})
y = np.random.binomial(1, p=0.5, size=n)

# Fit the GLM model
model = GLM(y, X, family=Binomial())
result = model.fit()

# Extract coefficients and confidence intervals
active_coef = result.params  # Fixed effect coefficients
conf_int = result.conf_int()  # Confidence intervals

print("Coef values:", active_coef)
print("Conf_int:\n", conf_int)

# Calculate yerr as a 2D array
yerr = np.array([active_coef.values - conf_int.iloc[:, 0], conf_int.iloc[:, 1] - active_coef.values])

# Plotting
fig, ax = plt.subplots(figsize=(8, 5))
sns.barplot(x=active_coef.index, y=active_coef.values, ax=ax, color='lightgray')

# Add error bars
x_positions = range(len(active_coef))
ax.errorbar(x=x_positions, y=active_coef.values, yerr=yerr, fmt='none', capsize=5, color='black')

# Add labels
ax.set_xlabel('Variable')
ax.set_ylabel('Coefficient Value')
ax.set_title('Fixed Effects Coefficients and 95% Confidence Intervals')
ax.errorbar(x=x_positions, y=active_coef.values, yerr=yerr, fmt='none', capsize=10, elinewidth=2, color='black')
ax.yaxis.grid(True, linestyle="--", alpha=0.7)
significant = result.pvalues < 0.05
colors = ['red' if sig else 'skyblue' for sig in significant]

sns.barplot(x=active_coef.index, y=active_coef.values, ax=ax, palette=colors)
for i, value in enumerate(active_coef.values):
    ax.text(i, value + 0.02, f"{value:.2f}", ha="center", va="bottom", fontsize=10)
ax.set_xlabel('Epigenetic Markers', fontsize=12)
ax.set_ylabel('Effect Size (Coefficient)', fontsize=12)
ax.set_title('GLMM Results: Active Site Effects', fontsize=14, weight='bold')

plt.xticks(rotation=45)
plt.tight_layout()
plt.show()